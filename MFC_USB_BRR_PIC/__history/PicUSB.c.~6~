/////////////////////////////////////////////////////////////////////////
////                            PicUSB.c                             ////
////                                                                 ////
//// Este ejemplo muestra como desarrollar un sencillo dispositivo   ////
//// USB con el PIC18F2550, aunque puede ser facilmente adaptado     ////
//// para la serie 18Fxx5x. Se suministra el PicUSB.exe, así como    ////
//// su código fuente para Visual C# 2005, podréis encontrar tb      ////
//// los drivers para el dispositivo. No se suministra esquema de    ////
//// conexión puesto que está pensado para ser usado en el GTP USB,  ////
//// cualquiera de las tres versiones disponibles, si aun no teneis  ////
//// el programador, podeis utilizar el esquema de ese proyecto.     ////
////                                                                 ////
//// Cuando el dispositivo sea conectado al PC, saldrá el asistente  ////
//// para la instalación del driver. Instala el suministrado junto   ////
//// a este ejemplo, lo encontrareis dentro de la carpeta Driver.    ////
//// Una vez instalado podreis usar el PicUSB.exe para encender o    ////
//// apagar el led bicolor del GTP USB, y para realizar la suma de   ////
//// dos números introducidos.                                       ////
////                                                                 ////
//// Realizado con el compilador CCS PCWH 3.227                      ////
////                                                                 ////
//// Por: Jaime Fernández-Caro Belmonte        hobbypic@hotmail.com  ////
////                                                                 ////
//// http://www.hobbypic.com                                         ////
/////////////////////////////////////////////////////////////////////////
#include <18F4550.h>
#device ADC = 8
#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV1,VREGEN
#use delay(clock=12000000)


/////////////////////////////////////////////////////////////////////////////
//
// CCS Library dynamic defines.  For dynamic configuration of the CCS Library
// for your application several defines need to be made.  See the comments
// at usb.h for more information
//
/////////////////////////////////////////////////////////////////////////////
#define USB_HID_DEVICE     FALSE             //deshabilitamos el uso de las directivas HID
#define USB_EP1_TX_ENABLE  USB_ENABLE_BULK   //turn on EP1(EndPoint1) for IN bulk/interrupt transfers
#define USB_EP1_RX_ENABLE  USB_ENABLE_BULK   //turn on EP1(EndPoint1) for OUT bulk/interrupt transfers
#define USB_EP1_TX_SIZE    1                 //size to allocate for the tx endpoint 1 buffer
#define USB_EP1_RX_SIZE    3                 //size to allocate for the rx endpoint 1 buffer


/////////////////////////////////////////////////////////////////////////////
//
// If you are using a USB connection sense pin, define it here.  If you are
// not using connection sense, comment out this line.  Without connection
// sense you will not know if the device gets disconnected.
//       (connection sense should look like this:
//                             100k
//            VBUS-----+----/\/\/\/\/\----- (I/O PIN ON PIC)
//                     |
//                     +----/\/\/\/\/\-----GND
//                             100k
//        (where VBUS is pin1 of the USB connector)
//
/////////////////////////////////////////////////////////////////////////////
//#define USB_CON_SENSE_PIN PIN_B2  //CCS 18F4550 development kit has optional conection sense pin

/////////////////////////////////////////////////////////////////////////////
//
// Include the CCS USB Libraries.  See the comments at the top of these
// files for more information
//
/////////////////////////////////////////////////////////////////////////////
#define use_portb_lcd TRUE         //definir portb lcd
#include<lcd.c>

#include <pic18_usb.h>     //Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver
#include <PicUSB.h>         //Configuración del USB y los descriptores para este dispositivo
#include <usb.c>           //handles usb setup tokens and get descriptor reports


/////////////////////////////////////////////////////////////////////////////
//
// Al conectar el PicUSB al PC encendemos el Led Rojo hasta que el dispositivo
// halla sido configurado por el PC, en ese momento encederemos el Led Verde.
// Esperaremos hasta que se reciba un paquete proveniente del PC. Comprobaremos
// el primer byte del paquete recibido para comprobar si queremos entrar en el
// modo Suma, donde se realizará una suma de dos operandos, que corresponderan
// con los dos bytes restantes del paquete recibido; una vez realizada la suma
// enviaremos el paquete con el resultado de vuelta al PC. Si entramos en el
// modo Led comprobaremos el segundo byte del paquete recibido para comprobar
// si deberemos apagar los leds, encender el verder o el rojo.
//
/////////////////////////////////////////////////////////////////////////////

void main(void) {
   int8 dato[1];
   int8 dato1[1];
   int8 valor_adc;
   
   output_high(PIN_B7);             //enciende el led al conectar el pic
   usb_init();                      //inicializamos el USB
   usb_task();                      //habilita periferico usb e interrupciones
   usb_wait_for_enumeration();      //esperamos hasta que el PicUSB sea configurado por el host
   output_low(PIN_B7);              // se apaga el led al existir comunicación usb
   setup_adc_ports(AN0);            // configuro el puerto A0 para lectura de datos 
   setup_adc(adc_clock_internal);
           
  while (TRUE) {
      if(usb_enumerated())          //si el PicUSB sigue configurado
      {
         if (usb_kbhit(1))          //si el endpoint de salida contiene datos del host
         {
            //PRENDER Y APAGAR LED
            usb_get_packet(1, dato, 1); //cojemos el paquete de tamaño 8 bits de "dato" y almacenamos en recibe
            if (dato[0] == 0) 
            {
               output_low(PIN_B4);   // Apaga led
            }

            if (dato[0] == 1) // Modo_Led
            {
               output_high(PIN_B4);   //// Enciende led
            }
            
            //MOTOR A PASOS 
           usb_get_packet(1, dato1, 8 ); //cojemos el paquete de tamaño 8 bits de "dato1" y almacenamos en recibe
           //IZQUIERDA
           if (dato1[0] == 0x01){
               output_high(PIN_B0);
           }
           if (dato1[0] == 0x02){
               output_high(PIN_B1);
           }
           if (dato1[0] == 0x04){
               output_high(PIN_B2);
           }
           if (dato1[0] == 0x08){
               output_high(PIN_B3);
           }
           //DERECHA
           if (dato1[0] == 0x08){
               output_high(PIN_B3);
           }
           if (dato1[0] == 0x04){
               output_high(PIN_B2);
           }
           if (dato1[0] == 0x02){
               output_high(PIN_B1);
           }
           if (dato1[0] == 0x01){
               output_high(PIN_B0);
           }
           //LEER VALOR DE UN POTENCIOMETRO
           set_adc_channel(0);
           delay_us(4);
           valor_adc = read_adc();
           
         }//KBHIT
      }//ENUMERATED
   }//WHILE
}//MAIN
